import com.android.builder.core.DefaultManifestParser

apply plugin: 'com.android.library'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:support-v4:+'
    compile project(path: ':mupdf-for-cleverdox')
}

if(new File('../signing.gradle').exists()) {
  apply from: 'signing.gradle';
}


android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
/*
    applicationVariants.all { variant ->
    	// deactivate manifest merging
    	// http://stackoverflow.com/a/13959122/3070886
	    variant.processResources.manifestFile = file('AndroidManifest.xml')
	    variant.processManifest.enabled=false

        // get versionName from manifest
        def manifestParser = new DefaultManifestParser()
        def versionName = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
    
	    // name apk
	    // https://gist.github.com/twocity/8121849
        println "*********" + variant.description + "**********";
        def apkName = "cleverdoxViewer";
        if (!variant.zipAlign) {
            apkName += "-unaligned";
        }
        if (variant.buildType.name == "release") {
            apkName += "-RELEASE-v" + versionName + ".apk";
        } else {
            apkName += "-DEBUG.apk";
        }
        println "*********" + "$project.buildDir/apk/" + apkName + "**********";
        variant.outputFile = file("$project.buildDir/apk/" + apkName)
    }
    */
}
